// pages/index.js
import { useState, useRef, useEffect } from 'react';
import Head from 'next/head';
import ReactMarkdown from 'react-markdown';

export default function Home() {
  const [messages, setMessages] = useState([
    {
      from: 'bot',
      text:
        "Bonjour üëã! Je suis **AutoAI** (Re-FAP). Je t‚Äôaide √† comprendre un voyant, un souci de **FAP/DPF** ou autre panne et je t‚Äôoriente vers la bonne solution. Pose ta question üòÑ",
    },
  ]);
  const [input, setInput] = useState('');
  const [loading, setLoading] = useState(false);
  const [blocked, setBlocked] = useState(false);
  const [error, setError] = useState('');
  const [nextAction, setNextAction] = useState(null);   // { type: 'FAP' | 'DIAG' }
  const [showCoach, setShowCoach] = useState(false);
  const chatEndRef = useRef(null);

  useEffect(() => {
    chatEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  }, [messages, loading]);

  useEffect(() => {
    if (!nextAction) return;
    setShowCoach(true);
    const t = setTimeout(() => setShowCoach(false), 6000);
    return () => clearTimeout(t);
  }, [nextAction && nextAction.type]);

  function getHistoriqueText() {
    const lastMessages = messages.slice(-5);
    return lastMessages
      .map((m) => (m.from === 'user' ? `Moi: ${m.text}` : `AutoAI: ${m.text}`))
      .join('\n');
  }

  async function handleSubmit(e) {
    e.preventDefault();

    const userMessagesCount = messages.filter((m) => m.from === 'user').length;
    if (userMessagesCount >= 10) {
      setBlocked(true);
      setError("üîß Tu as d√©j√† √©chang√© 10 messages avec moi sur ce sujet ! Pour √©viter les conversations trop longues, la session s‚Äôarr√™te ici. Tu peux relancer une nouvelle discussion √† tout moment üöÄ.");
      return;
    }

    const trimmedInput = input.trim();
    if (!trimmedInput) return;

    setMessages((msgs) => [...msgs, { from: 'user', text: trimmedInput }]);
    setInput('');
    setLoading(true);
    setError('');

    const historiqueText = getHistoriqueText() + `\nMoi: ${trimmedInput}`;

    try {
      const res = await fetch('/api/chat', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ question: trimmedInput, historique: historiqueText }),
      });

      setLoading(false);

      if (!res.ok) {
        setMessages((msgs) => [
          ...msgs,
          { from: 'bot', text: res.status === 429 ? '‚ö†Ô∏è Le service est temporairement satur√©, merci de r√©essayer plus tard.' : `Erreur serveur ${res.status}` },
        ]);
        return;
      }

      const data = await res.json();

let reply = (data.reply || '').trim();

// ‚Äî‚Äî‚Äî ENFORCE: bloc "Question finale" FAP avec choix Oui/Non ‚Äî‚Äî‚Äî
if (data.nextAction?.type === 'FAP') {
  const choicesLine =
    '‚Üí Oui : [Trouver un Carter-Cash](https://auto.re-fap.fr/?utm_source=autoai&utm_medium=cta&utm_campaign=v2&utm_content=cartercash) ‚Ä¢ Non : [Trouver un garage partenaire Re-FAP](https://re-fap.fr/trouver_garage_partenaire/?utm_source=autoai&utm_medium=cta&utm_campaign=v2&utm_content=garage)';

  const hasQuestion = /(\*\*|\*)?Question finale\s*:\s*/i.test(reply);
  const hasChoices  = /‚Üí\s*Oui\s*:/i.test(reply);

  if (!hasQuestion && !hasChoices) {
    // Rien du tout ‚Üí on ajoute question + choix
    reply = `${reply}\n**Question finale :** Sais-tu d√©monter ton FAP toi-m√™me ?\n${choicesLine}`.trim();
  } else if (hasQuestion && !hasChoices) {
    // Question pr√©sente, choix absents ‚Üí on ins√®re la ligne juste apr√®s l‚Äôen-t√™te
    reply = reply.replace(
      /(\*\*Question finale\s*:\*\*.*?)(\n|$)/i,
      (_m, head, eol) => `${head}${eol}${choicesLine}\n`
    ).trim();
  }
}
// ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî

setMessages((msgs) => [...msgs, { from: 'bot', text: reply }]);
setNextAction(data.nextAction || { type: 'DIAG' });


  return (
    <>
      <Head>
        <title>Auto AI</title>
        <link rel="stylesheet" href="/style.css" />
      </Head>

      <main className="container">
        <h1>AutoAI par Re-FAP</h1>

        <div className="chat-and-button">
          <div id="chat-window" className="chat-window">

            {nextAction && (
              <div className="bot-msg chat-hint">
                <strong>Astuce :</strong> la <em>solution recommand√©e</em> est √† droite üëâ (boutons verts/bleus).
              </div>
            )}

            {messages.map((m, i) => (
              <div key={i} className={m.from === 'user' ? 'user-msg' : 'bot-msg'}>
                <strong>{m.from === 'user' ? 'Moi' : 'AutoAI'}:</strong>
                <ReactMarkdown skipHtml>{m.text.replace(/\n{2,}/g, '\n')}</ReactMarkdown>
              </div>
            ))}

            {loading && (
              <div className="bot-msg typing-indicator">
                <strong>AutoAI:</strong>
                <span className="dots"><span>.</span><span>.</span><span>.</span></span>
              </div>
            )}

            {nextAction && <InlineCTA type={nextAction.type} />}

            <div ref={chatEndRef} />
          </div>

          <div className="garage-button-container">
            {showCoach && nextAction && (
              <Coachmark type={nextAction.type} onClose={() => setShowCoach(false)} />
            )}

            {nextAction?.type === 'FAP' && (
              <>
                <FapExplainer highlight={showCoach} />
                <CtaForFAP highlight={showCoach} />
              </>
            )}
            {nextAction?.type === 'DIAG' && <CtaForDiag highlight={showCoach} />}
            {!nextAction && <CtaDefault highlight={showCoach} />}
          </div>
        </div>

        <form onSubmit={handleSubmit} className="chat-form">
          <input
            type="text"
            placeholder="√âcris ta question ici..."
            value={input}
            onChange={(e) => {
              const val = e.target.value;
              setInput(val);
              setError(val.length > 600 ? '‚ö†Ô∏è Ton message ne peut pas d√©passer 600 caract√®res.' : '');
            }}
            autoComplete="off"
            id="user-input"
            disabled={blocked}
          />
          <button type="submit" disabled={blocked || input.length > 600 || loading}>
            {loading ? 'Envoi‚Ä¶' : 'Envoyer'}
          </button>
        </form>

        {error && <p className="error-msg">{error}</p>}
      </main>

      <footer className="footer">
        <p>‚ö†Ô∏è AutoAI peut faire des erreurs, envisage de v√©rifier les informations importantes.</p>
      </footer>
    </>
  );
}

/* ===================== CTA Components ===================== */

function CtaForFAP({ highlight }) {
  return (
    <>
      <div className={`cta-card ${highlight ? 'pulse-card' : ''}`}>
        <div className="cta-title">Tu sais d√©monter ton FAP toi-m√™me ?</div>
        <p className="cta-desc">
          <strong>Solution id√©ale :</strong> d√©pose ton FAP directement dans un
          <strong> Carter-Cash</strong> pr√®s de chez toi. En partenariat avec Re-FAP,
          ils proposent un <em>nettoyage ‚Äúcomme neuf‚Äù</em> √† <strong>partir de 99‚Ç¨ TTC</strong>.
        </p>
        <div className="cta-actions">
          <a href="https://auto.re-fap.fr" className="carter-button" rel="noopener noreferrer">
            D√©poser chez Carter-Cash üõ†Ô∏è
          </a>
        </div>
      </div>

      <div className={`cta-card ${highlight ? 'pulse-card' : ''}`}>
        <div className="cta-title">Tu ne veux/peux pas le d√©monter ?</div>
        <p className="cta-desc">
          Confie le v√©hicule √† un <strong>garage partenaire Re-FAP</strong> :
          diagnostic confirm√© + devis <strong>tout compris</strong> (d√©pose FAP,
          <strong> nettoyage Re-FAP</strong>, repose, r√©initialisation).
        </p>
        <div className="cta-actions">
          <a href="https://re-fap.fr/trouver_garage_partenaire/" className="garage-button" rel="noopener noreferrer">
            Prendre RDV avec un garage üîß
          </a>
        </div>
      </div>
    </>
  );
}

function CtaForDiag({ highlight }) {
  return (
    <div className={`cta-card ${highlight ? 'pulse-card' : ''}`}>
      <div className="cta-title">Besoin d‚Äôun diagnostic √©lectronique</div>
      <p className="cta-desc">
        Lecture des codes + tests des composants pour identifier la cause r√©elle
        (turbo, EGR, capteurs, AdBlue‚Ä¶) avant toute r√©paration.
      </p>
      <div className="cta-actions">
        <a href="https://re-fap.fr/trouver_garage_partenaire/" className="garage-button" rel="noopener noreferrer">
          Prendre RDV avec un garage üîé
        </a>
      </div>
    </div>
  );
}

// Accueil (avant 1√®re r√©ponse)
function CtaDefault({ highlight }) {
  return (
    <>
      <div className={`cta-card ${highlight ? 'pulse-card' : ''}`}>
        <div className="cta-title">Tu veux qu‚Äôun pro s‚Äôen charge ?</div>
        <p className="cta-desc">
          R√©seau de <strong>garages partenaires Re-FAP</strong> : diagnostic, d√©pose,
          <strong> nettoyage Re-FAP</strong>, repose, r√©initialisation.
        </p>
        <div className="cta-actions">
          <a href="https://re-fap.fr/trouver_garage_partenaire/" className="garage-button" rel="noopener noreferrer">
            Trouver un garage partenaire üîß
          </a>
        </div>
      </div>

      <div className="cta-card">
        <div className="cta-title">Tu sais d√©monter ton FAP ?</div>
        <p className="cta-desc">
          D√©pose directe dans un <strong>Carter-Cash</strong> : nettoyage Re-FAP
          <strong> √† partir de 99‚Ç¨ TTC</strong>.
        </p>
        <div className="cta-actions">
          <a href="https://auto.re-fap.fr" className="carter-button" rel="noopener noreferrer">
            Trouver un Carter-Cash üõ†Ô∏è
          </a>
        </div>
      </div>
    </>
  );
}

/* ===================== FAP Explainer ===================== */

function FapExplainer({ highlight }) {
  return (
    <>
      <div className={`cta-card ${highlight ? 'pulse-card' : ''}`}>
        <div className="cta-title">Pourquoi le nettoyage FAP ?</div>
        <ul className="cta-desc">
          <li><strong>Qualit√©/fiabilit√© :</strong> quand le FAP n‚Äôest pas endommag√©, le nettoyage Re-FAP restaure les performances d‚Äôorigine dans la grande majorit√© des cas.</li>
          <li><strong>√âconomique :</strong> √©vite un remplacement co√ªteux ; chez Carter-Cash, √† partir de <strong>99‚Ç¨ TTC</strong>.</li>
          <li><strong>√âco-responsable :</strong> on r√©utilise la pi√®ce au lieu de la jeter.</li>
        </ul>
      </div>

      <div className="cta-card">
        <div className="cta-title">Quand √ßa ne suffit pas ?</div>
        <ul className="cta-desc">
          <li>FAP <strong>fissur√©/fondu</strong> (choc thermique, r√©g√©n√©ration rat√©e).</li>
          <li>Capteurs <strong>diff√©rentiel/temp√©rature</strong> HS ou fuite turbo importante.</li>
          <li>Calculateur bloqu√© en <strong>mode d√©grad√©</strong> non lev√©.</li>
        </ul>
        <p className="cta-desc">Dans ces cas : diagnostic et prise en charge par un <strong>garage partenaire</strong>.</p>
      </div>
    </>
  );
}

/* ===================== Helpers visuels ===================== */

function Coachmark({ type, onClose }) {
  const label =
    type === 'FAP'
      ? 'Recommandation FAP : choisis l‚Äôoption qui te correspond üëâ'
      : 'Besoin d‚Äôun diagnostic ? Clique ici üëâ';
  return (
    <div className="coachmark" role="status" aria-live="polite">
      <span>{label}</span>
      <button className="coachmark-close" onClick={onClose} aria-label="Fermer">√ó</button>
    </div>
  );
}

function InlineCTA({ type }) {
  if (type === 'FAP') {
    return (
      <div className="inline-cta">
        <a href="https://re-fap.fr/trouver_garage_partenaire/" className="garage-button">Prendre RDV üîß</a>
        <a href="https://auto.re-fap.fr" className="carter-button">D√©poser chez Carter-Cash üõ†Ô∏è</a>
      </div>
    );
  }
  // DIAG (et tout le reste) ‚Üí uniquement garage
  return (
    <div className="inline-cta">
      <a href="https://re-fap.fr/trouver_garage_partenaire/" className="garage-button">Prendre RDV diagnostic üîé</a>
    </div>
  );
}

